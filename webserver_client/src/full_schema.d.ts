/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 *
 * String constants that represent connection types.
 *
 * Default: Connection used by the editor. Opened by the editor upon the initial connection.
 * Query: Connection used for executing queries. Opened when the first query is executed.
 *
 */
export type ConnectionType = "Default" | "Query" | "Edit" | "QueryCancel" | "ObjectExplorer" | "Intellisense";
export type RowOperationRequest = SessionOperationRequest;
export type UpdateCellRequest = RowOperationRequest;
export type CreateRowRequest = SessionOperationRequest;
export type DeleteRowRequest = RowOperationRequest;
export type DisposeRequest = SessionOperationRequest;
export type EditCommitRequest = SessionOperationRequest;
export type RevertCellRequest = RowOperationRequest;
export type RevertRowRequest = RowOperationRequest;
/**
 * Enum for the type of backups that are supported
 */
export type BackupType = "dump" | "directory" | "tar" | "sql";
export type ExecuteStringParams = ExecuteRequestParamsBase;
export type ExecuteDocumentSelectionParams = ExecuteRequestParamsBase;
export type ExecuteDocumentStatementParams = ExecuteRequestParamsBase;
export type SaveResultsAsCsvRequestParams = SaveResultsRequestParams;
export type SaveResultsAsJsonRequestParams = SaveResultsRequestParams;
export type SaveResultsAsExcelRequestParams = SaveResultsRequestParams;
/**
 * Class that defines the various script operations
 */
export type ScriptOperation = 0 | 1 | 3 | 4;
/**
 *
 * The kind of a completion entry. These are defined by the
 * Language Service specification. SQL types are loosely mapped to these.
 *
 */
export type CompletionItemKind = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18;
export type DocumentRangeFormattingParams = DocumentFormattingParams;

export interface UnifiedSchema {
  CancelConnectParams?: CancelConnectParams;
  ConnectionType?: ConnectionType;
  BuildConnectionInfoParams?: BuildConnectionInfoParams;
  ConnectRequestParams?: ConnectRequestParams;
  ConnectionDetails?: ConnectionDetails;
  ChangeDatabaseRequestParams?: ChangeDatabaseRequestParams;
  DisconnectRequestParams?: DisconnectRequestParams;
  GetConnectionStringParams?: GetConnectionStringParams;
  ListDatabasesParams?: ListDatabasesParams;
  DidChangeConfigurationParams?: DidChangeConfigurationParams;
  DidChangeTextDocumentParams?: DidChangeTextDocumentParams;
  DidCloseTextDocumentParams?: DidCloseTextDocumentParams;
  DidOpenTextDocumentParams?: DidOpenTextDocumentParams;
  MetadataListParameters?: MetadataListParameters;
  InitializeEditParams?: InitializeEditParams;
  EditInitializerFilter?: EditInitializerFilter;
  SessionOperationRequest?: SessionOperationRequest;
  RowOperationRequest?: RowOperationRequest;
  UpdateCellRequest?: UpdateCellRequest;
  CreateRowRequest?: CreateRowRequest;
  DeleteRowRequest?: DeleteRowRequest;
  DisposeRequest?: DisposeRequest;
  EditCommitRequest?: EditCommitRequest;
  RevertCellRequest?: RevertCellRequest;
  RevertRowRequest?: RevertRowRequest;
  EditSubsetParams?: EditSubsetParams;
  GetDatabaseInfoParameters?: GetDatabaseInfoParameters;
  CapabilitiesRequestParams?: CapabilitiesRequestParams;
  InitializeRequestParams?: InitializeRequestParams;
  BackupParams?: BackupParams;
  BackupInfo?: BackupInfo;
  BackupType?: BackupType;
  RestoreParams?: RestoreParams;
  RestoreOptions?: RestoreOptions;
  CancelTaskParameters?: CancelTaskParameters;
  ListTasksParameters?: ListTasksParameters;
  ExecuteRequestParamsBase?: ExecuteRequestParamsBase;
  ExecutionPlanOptions?: ExecutionPlanOptions;
  ExecuteStringParams?: ExecuteStringParams;
  ExecuteDocumentSelectionParams?: ExecuteDocumentSelectionParams;
  SelectionData?: SelectionData;
  ExecuteDocumentStatementParams?: ExecuteDocumentStatementParams;
  SubsetParams?: SubsetParams;
  QueryCancelParams?: QueryCancelParams;
  QueryDisposeParams?: QueryDisposeParams;
  SimpleExecuteRequest?: SimpleExecuteRequest;
  QueryExecutionPlanRequest?: QueryExecutionPlanRequest;
  SaveResultsRequestParams?: SaveResultsRequestParams;
  SaveResultsAsCsvRequestParams?: SaveResultsAsCsvRequestParams;
  SaveResultsAsJsonRequestParams?: SaveResultsAsJsonRequestParams;
  SaveResultsAsExcelRequestParams?: SaveResultsAsExcelRequestParams;
  ScriptAsParameters?: ScriptAsParameters;
  ScriptOperation?: ScriptOperation;
  LanguageFlavorChangeParams?: LanguageFlavorChangeParams;
  TextDocumentPosition?: TextDocumentPosition;
  TextDocumentIdentifier?: TextDocumentIdentifier;
  Position?: Position;
  CompletionItem?: CompletionItem;
  CompletionItemKind?: CompletionItemKind;
  TextEdit?: TextEdit;
  DocumentFormattingParams?: DocumentFormattingParams;
  FormattingOptions?: FormattingOptions;
  DocumentRangeFormattingParams?: DocumentRangeFormattingParams;
  Range?: Range;
  CloseSessionParameters?: CloseSessionParameters;
  ExpandParameters?: ExpandParameters;
  [k: string]: unknown;
}
export interface CancelConnectParams {
  owner_uri?: string;
  type?: ConnectionType;
  [k: string]: unknown;
}
export interface BuildConnectionInfoParams {
  owner_uri?: string;
  type?: ConnectionType;
  [k: string]: unknown;
}
export interface ConnectRequestParams {
  owner_uri?: string;
  connection?: ConnectionDetails;
  type?: ConnectionType;
  [k: string]: unknown;
}
export interface ConnectionDetails {
  database_name?: string;
  port?: string;
  server_name?: string;
  user_name?: string;
  options?: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface ChangeDatabaseRequestParams {
  owner_uri?: string;
  new_database?: string;
  connection?: ConnectionDetails;
  [k: string]: unknown;
}
export interface DisconnectRequestParams {
  owner_uri?: string;
  type?: ConnectionType;
  [k: string]: unknown;
}
export interface GetConnectionStringParams {
  owner_uri?: string;
  [k: string]: unknown;
}
export interface ListDatabasesParams {
  owner_uri?: string;
  include_details?: boolean;
  [k: string]: unknown;
}
export interface DidChangeConfigurationParams {
  [k: string]: unknown;
}
export interface DidChangeTextDocumentParams {
  [k: string]: unknown;
}
export interface DidCloseTextDocumentParams {
  [k: string]: unknown;
}
export interface DidOpenTextDocumentParams {
  [k: string]: unknown;
}
export interface MetadataListParameters {
  owner_uri?: string;
  [k: string]: unknown;
}
export interface InitializeEditParams {
  owner_uri?: string;
  schema_name?: string;
  object_type?: string;
  object_name?: string;
  query_string?: string;
  filters?: EditInitializerFilter;
  [k: string]: unknown;
}
export interface EditInitializerFilter {
  limit_results?: number;
  [k: string]: unknown;
}
export interface SessionOperationRequest {
  owner_uri?: string;
  [k: string]: unknown;
}
export interface EditSubsetParams {
  owner_uri?: string;
  row_start_index?: number;
  row_count?: number;
  [k: string]: unknown;
}
export interface GetDatabaseInfoParameters {
  options?: {
    [k: string]: unknown;
  };
  owner_uri?: string;
  [k: string]: unknown;
}
export interface CapabilitiesRequestParams {
  host_name?: string;
  host_version?: string;
  [k: string]: unknown;
}
export interface InitializeRequestParams {
  capabilities?: string;
  initialization_options?: string;
  process_id?: number;
  trace?: string;
  root_path?: string;
  root_uri?: string;
  workspace_folders?: string;
  [k: string]: unknown;
}
export interface BackupParams {
  owner_uri?: string;
  backup_info?: BackupInfo;
  task_execution_mode?: string;
  [k: string]: unknown;
}
export interface BackupInfo {
  type?: BackupType;
  path?: string;
  jobs?: number;
  compress?: number;
  data_only?: boolean;
  blobs?: boolean;
  clean?: boolean;
  create?: boolean;
  encoding?: string;
  schema?: string;
  exclude_schema?: string;
  oids?: boolean;
  no_owner?: boolean;
  schema_only?: boolean;
  superuser?: string;
  table?: string;
  exclude_table?: string;
  no_privileges?: boolean;
  column_inserts?: boolean;
  disable_dollar_quoting?: boolean;
  disable_triggers?: boolean;
  enable_row_security?: boolean;
  exclude_table_data?: string;
  if_exists?: boolean;
  inserts?: boolean;
  no_security_labels?: boolean;
  no_synchronized_snapshots?: boolean;
  no_tablespaces?: boolean;
  no_unlogged_table_data?: boolean;
  quote_all_identifiers?: boolean;
  section?: string;
  serializable_deferrable?: boolean;
  snapshot?: string;
  strict_names?: boolean;
  use_set_session_authorization?: boolean;
  [k: string]: unknown;
}
export interface RestoreParams {
  owner_uri?: string;
  options?: RestoreOptions;
  task_execution_mode?: string;
  [k: string]: unknown;
}
export interface RestoreOptions {
  path?: string;
  data_only?: boolean;
  clean?: boolean;
  create?: boolean;
  exit_on_error?: boolean;
  index?: string;
  jobs?: number;
  use_list?: string;
  schema?: string;
  no_owner?: boolean;
  function?: string;
  schema_only?: boolean;
  superuser?: string;
  table?: string;
  trigger?: string;
  no_privileges?: boolean;
  single_transaction?: boolean;
  disable_triggers?: boolean;
  enable_row_security?: boolean;
  if_exists?: boolean;
  no_data_for_failed_tables?: boolean;
  no_security_labels?: boolean;
  no_tablespaces?: boolean;
  section?: string;
  strict_names?: boolean;
  role?: string;
  [k: string]: unknown;
}
export interface CancelTaskParameters {
  task_id?: string;
  [k: string]: unknown;
}
export interface ListTasksParameters {
  list_active_tasks_only?: boolean;
  [k: string]: unknown;
}
export interface ExecuteRequestParamsBase {
  owner_uri?: string;
  execution_plan_options?: ExecutionPlanOptions;
  [k: string]: unknown;
}
export interface ExecutionPlanOptions {
  include_actual_execution_plan_xml?: boolean;
  include_estimated_execution_plan_xml?: boolean;
  [k: string]: unknown;
}
export interface SelectionData {
  [k: string]: unknown;
}
export interface SubsetParams {
  owner_uri?: string;
  batch_index?: number;
  result_set_index?: number;
  rows_start_index?: number;
  rows_count?: number;
  [k: string]: unknown;
}
export interface QueryCancelParams {
  owner_uri?: string;
  [k: string]: unknown;
}
export interface QueryDisposeParams {
  owner_uri?: string;
  [k: string]: unknown;
}
export interface SimpleExecuteRequest {
  owner_uri?: string;
  query_string?: string;
  [k: string]: unknown;
}
export interface QueryExecutionPlanRequest {
  owner_uri?: string;
  batch_index?: number;
  result_set_index?: number;
  [k: string]: unknown;
}
export interface SaveResultsRequestParams {
  is_save_selection?: string;
  file_path?: string;
  batch_index?: number;
  result_set_index?: number;
  owner_uri?: string;
  row_start_index?: number;
  row_end_index?: number;
  column_start_index?: number;
  column_end_index?: number;
  [k: string]: unknown;
}
export interface ScriptAsParameters {
  owner_uri?: string;
  operation?: ScriptOperation;
  scripting_objects?: string;
  [k: string]: unknown;
}
export interface LanguageFlavorChangeParams {
  [k: string]: unknown;
}
export interface TextDocumentPosition {
  text_document?: TextDocumentIdentifier;
  position?: Position;
  [k: string]: unknown;
}
export interface TextDocumentIdentifier {
  uri?: string;
  [k: string]: unknown;
}
export interface Position {
  line?: number;
  character?: number;
  [k: string]: unknown;
}
export interface CompletionItem {
  label?: string;
  kind?: CompletionItemKind;
  detail?: string;
  documentation?: string;
  sort_text?: string;
  filter_text?: string;
  insert_text_format?: string;
  text_edit?: TextEdit;
  data?: string;
  [k: string]: unknown;
}
export interface TextEdit {
  [k: string]: unknown;
}
export interface DocumentFormattingParams {
  text_document?: TextDocumentIdentifier;
  options?: FormattingOptions;
  [k: string]: unknown;
}
export interface FormattingOptions {
  tab_size?: number;
  insert_spaces?: boolean;
  [k: string]: unknown;
}
export interface Range {
  start?: Position;
  end?: Position;
  [k: string]: unknown;
}
export interface CloseSessionParameters {
  session_id?: string;
  owner_uri?: string;
  type?: number;
  options?: {
    [k: string]: unknown;
  };
  server_name?: string;
  database_name?: string;
  user_name?: string;
  [k: string]: unknown;
}
export interface ExpandParameters {
  session_id?: string;
  node_path?: string;
  [k: string]: unknown;
}
